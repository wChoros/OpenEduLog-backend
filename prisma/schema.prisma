generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Roles {
  ADMIN
  TEACHER
  STUDENT
}

model User {
  id               Int      @id @default(autoincrement())
  firstName        String
  lastName         String
  email            String   @unique
  login            String   @unique
  password         String
  isEmailConfirmed Boolean  @default(false)
  phoneNumber      String?
  birthDate        DateTime
  addressId        Int
  role             Roles

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Session Session[]

  StudentsOnGroups StudentsOnGroups[]

  SubjectsOnTeachers SubjectsOnTeachers[]

  GroupsOnTeachersOnSubjects GroupsOnSubjectsOnTeachers[]

  Grade Grade[]

  Adress Adress @relation(fields: [addressId], references: [id])
}

model Adress {
  id      Int    @id @default(autoincrement())
  street  String
  house   String
  city    String
  zip     String
  country String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User User[]
}

model Session {
  id        Int      @id @default(autoincrement())
  token     String
  expiredAt DateTime
  userId    Int
  user      User     @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Subjects {
  id   Int    @id @default(autoincrement())
  name String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  SubjectsOnTeachers SubjectsOnTeachers[]

  GroupsOnTeachersOnSubjects GroupsOnSubjectsOnTeachers[]
}

model Group {
  id   Int    @id @default(autoincrement())
  name String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  StudentsOnGroups StudentsOnGroups[]

  GroupsOnTeachersOnSubjects GroupsOnSubjectsOnTeachers[]
}

model Grade {
  id                 Int   @id @default(autoincrement())
  value              Float
  studentId          Int
  subjectOnTeacherId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  student          User               @relation(fields: [studentId], references: [id])
  subjectOnTeacher SubjectsOnTeachers @relation(fields: [subjectOnTeacherId], references: [id])
}

model SubjectsOnTeachers {
  id        Int @id @default(autoincrement())
  subjectId Int
  teacherId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  subject Subjects @relation(fields: [subjectId], references: [id])
  teacher User     @relation(fields: [teacherId], references: [id])

  Grade Grade[]
}

model StudentsOnGroups {
  groupId   Int
  studentId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  group   Group @relation(fields: [groupId], references: [id])
  student User  @relation(fields: [studentId], references: [id])

  @@id([groupId, studentId])
}

model GroupsOnSubjectsOnTeachers {
  groupId   Int
  teacherId Int
  subjectId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  group   Group    @relation(fields: [groupId], references: [id])
  teacher User     @relation(fields: [teacherId], references: [id])
  subject Subjects @relation(fields: [subjectId], references: [id])

  @@id([groupId, teacherId, subjectId])
}
