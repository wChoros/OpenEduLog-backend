generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int      @id @default(autoincrement())
  firstName        String
  lastName         String
  email            String   @unique
  login            String   @unique
  password         String
  isEmailConfirmed Boolean
  phoneNumber      String
  birthDate        DateTime

  teacherId Int?
  studentId Int?

  TeacherInfo TeacherInfo? @relation(fields: [teacherId], references: [id])
  Student     Student?     @relation(fields: [studentId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Session Session[]
}

model Session {
  id        Int      @id @default(autoincrement())
  token     String
  expiredAt DateTime
  userId    Int
  user      User     @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TeacherInfo {
  id                 Int                  @id @default(autoincrement())
  TeachersOnSubjects TeachersOnSubjects[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User User[]
}

model Student {
  id     Int     @id @default(autoincrement())
  groups Group[]
  grade  Grade[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User User[]
}

model Group {
  id                 Int                  @id @default(autoincrement())
  name               String
  students           Student[]
  teachersOnSubjects TeachersOnSubjects[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Subject {
  id   Int    @id @default(autoincrement())
  name String

  TeachersOnSubjects TeachersOnSubjects[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TeachersOnSubjects {
  id        Int         @id @default(autoincrement())
  teacher   TeacherInfo @relation(fields: [teacherId], references: [id])
  teacherId Int
  subject   Subject     @relation(fields: [subjectId], references: [id])
  subjectId Int

  Group Group[]
  Grade Grade[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Adress {
  id      Int    @id @default(autoincrement())
  street  String
  house   String
  city    String
  zip     String
  country String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Grade {
  id                   Int                @id @default(autoincrement())
  value                Float
  student              Student            @relation(fields: [studentId], references: [id])
  studentId            Int
  teachersOnSubjects   TeachersOnSubjects @relation(fields: [teachersOnSubjectsId], references: [id])
  teachersOnSubjectsId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
